import { GluegunCommand } from 'gluegun'
import { exit } from 'process'
import * as Mustache from 'mustache'
import * as fs from 'fs'
import * as os from 'os'
import * as path from 'path'
import { ethers } from 'ethers'


//use this string to generate a config file stored locoally on the machine that holds private data
//such as private kets address and and seed keys for generating new accounts ans well as RPCs etc discord ids etc
//this init is only run once then you manually have to edit the file with the correct values 
const tpl = `mnemonic: {{mnemonic}} # Change to your custom mnemonic if you like
rpc_url: https://arb1.arbitrum.io/rpc
discord_token: "<discord_token>" # Discord application token required to run as Discord bot
discord_id: "<discord_id>" # ID of your Discord user to receive DMs
# The default behavior is to use accounts generated by the mnemonic
# Accounts are taken from index 0-4
# You an add custom accounts to any index below using a private key
# account_3: <private_key>
# account_4: <private_key>
` 

//discord token for bot was got like this https://github.com/reactiflux/discord-irc/wiki/Creating-a-discord-bot-&-getting-a-token


const command: GluegunCommand = {
  name: 'init',
  description: 'Create a basic configuration for bot',
  run: async (toolbox) => {
    const { banner, print } = toolbox

    banner()

    const config = Mustache.render(tpl, {
      mnemonic: ethers.Wallet.createRandom().mnemonic.phrase,
    })

    
    const homedir = os.homedir()
    const CONFIG_DIR = path.join(homedir, '.config', 'bwbot')

    if (!fs.existsSync(CONFIG_DIR)) {
      fs.mkdirSync(CONFIG_DIR, { recursive: true })
    }

    if (!fs.existsSync(path.join(CONFIG_DIR, '.bwbotrc.yml'))) {
      fs.writeFileSync(path.join(CONFIG_DIR, '.bwbotrc.yml'), config)
    } else {
      print.info('Already initialized.')
      exit(0)
    }

    print.success('Bridgeworld Bot Initialized!')
    print.info(
      `Please edit the config file located at ${print.colors.bgBlue(
        path.join(CONFIG_DIR, '.bwbotrc.yml')
      )}`
    )

    exit(0)
  },
}

module.exports = command
